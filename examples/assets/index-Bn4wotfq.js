var g=Object.defineProperty;var f=(n,h,e)=>h in n?g(n,h,{enumerable:!0,configurable:!0,writable:!0,value:e}):n[h]=e;var o=(n,h,e)=>(f(n,typeof h!="symbol"?h+"":h,e),e);import{J as w,U as c}from"./index-B3b_h8A8.js";import{C as k}from"./curve-highlighter-B2XYj340.js";import{M as v}from"./mark-B9TqPH3U.js";import"./web-ifc-api-BiYij3qq.js";import"./import-wrapper-prod-vMwJRSad.js";const l=class l extends w{constructor(e){super(e);o(this,"onHighlight",new c);o(this,"enabled",!0);o(this,"_highlighter");o(this,"mouseMarkers");o(this,"onMarkerChange",new c);o(this,"onMarkerHidden",new c);o(this,"_curves",[]);o(this,"_world",null);o(this,"onClick",e=>{if(!this.enabled||!this._highlighter)return;if(!this.world)throw new Error("No world found!");if(!this.world.renderer)return;const r=this.world.renderer.three.domElement,s=this.world.camera.three,t=this._highlighter.castRay(e,s,r,this._curves);if(t){const i=t.object;this._highlighter.select(i),this.updateMarker(t,"select");const{point:u,index:a}=t;a!==void 0&&this.onHighlight.trigger({curve:i,point:u,index:a});return}this._highlighter.unSelect(),this.mouseMarkers&&(this.mouseMarkers.hover.visible=!1),this.onMarkerHidden.trigger({type:"hover"})});o(this,"onMouseMove",async e=>{if(!this.enabled||!this._highlighter)return;if(!this.world)throw new Error("No world found!");if(!this.world.renderer)return;const r=this.world.renderer.three.domElement,s=this.world.camera.three,t=this._highlighter.castRay(e,s,r,this._curves);if(t){this._highlighter.hover(t.object),this.updateMarker(t,"hover");return}this._highlighter.unHover()});this.components.add(l.uuid,this)}get world(){return this._world}set world(e){var s,t,i;if(e===this._world||(this._world&&this.setupEvents(!1),this._world=e,(s=this._highlighter)==null||s.dispose(),(t=this.mouseMarkers)==null||t.hover.dispose(),(i=this.mouseMarkers)==null||i.select.dispose(),!e))return;const r=e.scene.three;this._highlighter=new k(r,"absolute"),this.mouseMarkers={select:this.newMouseMarker("#ffffff",e),hover:this.newMouseMarker("#575757",e)},this.setupEvents(!0)}get highlighter(){if(!this._highlighter)throw new Error("Navigator not initialized!");return this._highlighter}draw(e){if(!e.civilData)throw new Error("Model must have civil data!");if(!this.world)throw new Error("A world must be given before drawing an alignment!");const r=this.world.scene.three;for(const[s,t]of e.civilData.alignments)for(const{mesh:i}of t.absolute)r.add(i),this._curves.push(i)}newMouseMarker(e,r){const s=r.scene.three,t=document.createElement("div");t.style.backgroundColor=e,t.style.width="1rem",t.style.height="1rem",t.style.borderRadius="1rem";const i=new v(r,t,s);return i.visible=!1,i}setMarker(e,r,s){if(!this.mouseMarkers)throw new Error("No mouse markers found! Initialize the world before using this.");const t=e.getPointAt(r,"absolute");this.mouseMarkers[s].visible=!0,this.mouseMarkers[s].three.position.copy(t)}hideMarker(e){if(!this.mouseMarkers)throw new Error("No mouse markers found! Initialize the world before using this.");const r=this.mouseMarkers[e].three;r.visible=!1}setupEvents(e){if(!this.world)throw new Error("No world found!");if(!this.world.renderer)return;const r=this.world.renderer.three.domElement;e?(r.addEventListener("click",this.onClick),r.addEventListener("mousemove",this.onMouseMove)):(r.removeEventListener("click",this.onClick),r.removeEventListener("mousemove",this.onMouseMove))}updateMarker(e,r){if(!this.mouseMarkers)return;const{point:s,object:t}=e,i=t,u=i.curve,a=i.curve.alignment,d=a.getPercentageAt(s,"absolute");this.mouseMarkers[r].visible=!0,this.mouseMarkers[r].three.position.copy(s),d!==null&&this.onMarkerChange.trigger({alignment:a,percentage:d,type:r,curve:u})}};o(l,"uuid","0a59c09e-2b49-474a-9320-99f51f40f182");let m=l;export{m as C};
