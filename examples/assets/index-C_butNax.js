var D=Object.defineProperty;var F=(g,p,e)=>p in g?D(g,p,{enumerable:!0,configurable:!0,writable:!0,value:e}):g[p]=e;var R=(g,p,e)=>(F(g,typeof p!="symbol"?p+"":p,e),e);import{a as S,E as m}from"./index-CyDQMoMp.js";import{F as E}from"./index-896N8Hl2.js";import{I as T}from"./properties-utils-BQzyokIB.js";import{ao as O,ap as x,aq as C,ar as w,an as N,as as v,at as L,au as B}from"./web-ifc-api-DH5A5LIH.js";const j=(g,p,e)=>{var n;const s=e??(()=>{}),o={},i=Object.keys(g);for(const r of i){const a=g[r];if(!a)continue;const M=a.type===p,A=Object.keys(a).find(u=>u.startsWith("Relating")),l=Object.keys(a).find(u=>u.startsWith("Related"));if(!(M&&A&&l))continue;const c=g[(n=a[A])==null?void 0:n.value],d=a[l];if(!c||!d||!(d&&Array.isArray(d)))continue;const f=d.map(u=>u.value);s(c.expressID,f),o[c.expressID]=f}return o},G=new Map([[O,{forRelating:"IsDecomposedBy",forRelated:"Decomposes"}],[x,{forRelating:"AssociatedTo",forRelated:"HasAssociations"}],[C,{forRelating:"ClassificationForObjects",forRelated:"HasAssociations"}],[w,{forRelating:"IsGroupedBy",forRelated:"HasAssignments"}],[N,{forRelated:"IsDefinedBy",forRelating:"DefinesOcurrence"}],[v,{forRelated:"IsTypedBy",forRelating:"Types"}],[L,{forRelated:"IsDefinedBy",forRelating:"Defines"}],[B,{forRelated:"ContainedInStructure",forRelating:"ContainsElements"}]]),I=class I extends S{constructor(e){super(e);R(this,"onDisposed",new m);R(this,"enabled",!0);R(this,"onRelationsIndexed",new m);R(this,"_relToAttributesMap",G);R(this,"inverseAttributes",["IsDecomposedBy","Decomposes","AssociatedTo","HasAssociations","ClassificationForObjects","IsGroupedBy","HasAssignments","IsDefinedBy","DefinesOcurrence","IsTypedBy","Types","Defines","ContainedInStructure","ContainsElements"]);R(this,"relationMaps",{});R(this,"onFragmentsDisposed",e=>{delete this.relationMaps[e.groupID]});this.components.add(I.uuid,this),e.get(E).onFragmentsDisposed.add(this.onFragmentsDisposed)}getAttributeRels(e){const t=[];for(const[s,o]of this._relToAttributesMap.entries()){const{forRelating:i,forRelated:n}=o;(i===e||n===e)&&t.push(s)}return t}setRelationMap(e,t){this.relationMaps[e.uuid]=t,this.onRelationsIndexed.trigger({modelID:e.uuid,relationsMap:t})}async process(e){if(!e.hasProperties)throw new Error("FragmentsGroup properties not found");const t=new Map;for(const s of this.inverseAttributes){const o=this.getAttributeRels(s);for(const i of o)await T.getRelationMap(e,i,async(n,r)=>{const a=this._relToAttributesMap.get(i);if(!a)return;const{forRelated:M,forRelating:A}=a;if(A){const l=t.get(n)??new Map,c=this.inverseAttributes.indexOf(A);l.set(c,r),t.set(n,l)}if(M)for(const l of r){const c=t.get(l)??new Map,d=this.inverseAttributes.indexOf(M),f=c.get(d)??[];f.push(n),c.set(d,f),t.set(l,c)}})}return this.setRelationMap(e,t),t}async processFromWebIfc(e,t){const s=new Map,o={},i=e.GetAllLines(t);for(let n=0;n<i.size();n++){const r=i.get(n),a=await e.properties.getItemProperties(t,r);o[r]=a}for(const n of this.inverseAttributes){const r=this.getAttributeRels(n);for(const a of r)j(o,a,(M,A)=>{const l=this._relToAttributesMap.get(a);if(!l)return;const{forRelated:c,forRelating:d}=l;if(d){const f=s.get(M)??new Map,u=this.inverseAttributes.indexOf(d);f.set(u,A),s.set(M,f)}if(c)for(const f of A){const u=s.get(f)??new Map,b=this.inverseAttributes.indexOf(c),h=u.get(b)??[];h.push(M),u.set(b,h),s.set(f,u)}})}return this.onRelationsIndexed.trigger({modelID:t.toString(),relationsMap:s}),s}getEntityRelations(e,t,s){const o=this.relationMaps[e.uuid];if(!o)return null;const i=o.get(t),n=this.inverseAttributes.indexOf(s);if(!i||n===-1)return null;const r=i.get(n);return r||null}serializeRelations(e){const t={};for(const[s,o]of e.entries()){t[s]||(t[s]={});for(const[i,n]of o.entries())t[s][i]=n}return JSON.stringify(t)}serializeModelRelations(e){const t=this.relationMaps[e.uuid];return t?this.serializeRelations(t):null}serializeAllRelations(){const e={};for(const t in this.relationMaps){const s=this.relationMaps[t],o={};for(const[i,n]of s.entries()){o[i]||(o[i]={});for(const[r,a]of n.entries())o[i][r]=a}e[t]=o}return JSON.stringify(e)}getRelationsMapFromJSON(e){const t=JSON.parse(e),s=new Map;for(const o in t){const i=t[o],n=new Map;for(const r in i)n.set(Number(r),i[r]);s.set(Number(o),n)}return s}dispose(){this.relationMaps={},this.components.get(E).onFragmentsDisposed.remove(this.onFragmentsDisposed),this.onDisposed.trigger(I.uuid),this.onDisposed.reset()}};R(I,"uuid","23a889ab-83b3-44a4-8bee-ead83438370b");let y=I;export{y as I};
