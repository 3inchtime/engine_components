var P=Object.defineProperty;var _=(i,l,e)=>l in i?P(i,l,{enumerable:!0,configurable:!0,writable:!0,value:e}):i[l]=e;var c=(i,l,e)=>(_(i,typeof l!="symbol"?l+"":l,e),e);import{M as u,c as E,d as A,e as k,I,T as j}from"./web-ifc-api-D3oDn2HF.js";import{S as K}from"./stats.min-DDrWCSVO.js";import{C as D,E as N,R as x,M as C,a as R,W as z,S as O,b as U,G,F as V}from"./index-DPB0U-mi.js";import{n as H,M as W,P as q}from"./import-wrapper-prod-C6LuifRs.js";const y=class y extends D{constructor(e){super(e);c(this,"selection",[]);c(this,"preview",new u(new E,new A({side:2,depthTest:!1,transparent:!0,opacity:.25,color:"#BCF124"})));c(this,"selectionMaterial",new A({side:2,depthTest:!1,transparent:!0,color:"#BCF124",opacity:.75}));c(this,"world");c(this,"onDisposed",new N);c(this,"_enabled",!1);c(this,"_currentSelelection",null);c(this,"create",()=>{if(!this.world)throw new Error("No world given to the face measurement!");if(!this.enabled||!this._currentSelelection)return;const e=this.world.scene.three,n=new E,t=new u(n,this.selectionMaterial);n.setAttribute("position",this.preview.geometry.attributes.position),e.add(t),n.computeBoundingSphere();const{area:s,perimeter:o}=this._currentSelelection,r=this.newLabel(n,s);t.add(r.three),this.selection.push({area:s,perimeter:o,mesh:t,label:r})});c(this,"onMouseMove",()=>{if(!this.world)throw new Error("The face measurement needs a world to work!");if(!this.enabled){this.unselect();return}const t=this.components.get(x).get(this.world).castRay();if(!t||!t.object||t.faceIndex===void 0){this.unselect();return}const{object:s,faceIndex:o}=t;s instanceof u||s instanceof I?this.updateSelection(s,o,t.instanceId):this.unselect()});c(this,"onKeydown",e=>{});this.components.add(y.uuid,this),this.preview.frustumCulled=!1}set enabled(e){if(!this.world)throw new Error("No world given for the Face measurement!");this._enabled=e,this.setupEvents(e),e?this.world.scene.three.add(this.preview):(this.preview.removeFromParent(),this.cancelCreation()),this.setVisibility(e)}get enabled(){return this._enabled}dispose(){this.setupEvents(!1),this.deleteAll(),this.preview.removeFromParent(),this.preview.material.dispose(),this.preview.geometry.dispose(),this.selectionMaterial.dispose(),this.onDisposed.trigger(),this.onDisposed.reset(),this.components=null}delete(){if(!this.world)throw new Error("No world given to the face measurement!");const e=this.selection.map(a=>a.mesh),s=this.components.get(x).get(this.world).castRay(e);if(!s||!s.object)return;const o=this.selection.find(a=>a.mesh===s.object);if(!o)return;o.mesh.removeFromParent(),o.mesh.geometry.dispose(),o.label.dispose();const r=this.selection.indexOf(o);this.selection.splice(r,1)}deleteAll(){for(const e of this.selection)e.mesh.removeFromParent(),e.mesh.geometry.dispose(),e.label.dispose();this.selection=[]}endCreation(){}cancelCreation(){}get(){const e=[];for(const n of this.selection){const t=n.mesh.geometry,{area:s,perimeter:o}=n,r=t.attributes.position.array;e.push({position:r,area:s,perimeter:o})}return e}set(e){if(!this.world)throw new Error("No world given to the face measurement!");const n=this.world.scene.three;for(const t of e){const s=new E,o=new u(s,this.selectionMaterial);n.add(o);const r=new k(t.position,3);s.setAttribute("position",r),s.computeBoundingSphere();const{area:a,perimeter:m}=t,w=this.newLabel(s,a);o.add(w.three),this.selection.push({area:a,perimeter:m,mesh:o,label:w})}}setupEvents(e){if(!this.world)throw new Error("The face measurement needs a world to work!");if(this.world.isDisposing)return;if(!this.world.renderer)throw new Error("The world of the face measurement needs a renderer!");const t=this.world.renderer.three.domElement.parentElement;t.removeEventListener("click",this.create),t.removeEventListener("mousemove",this.onMouseMove),window.removeEventListener("keydown",this.onKeydown),e&&(t.addEventListener("click",this.create),t.addEventListener("mousemove",this.onMouseMove),window.addEventListener("keydown",this.onKeydown))}setVisibility(e){if(!this.world)throw new Error("The face measurement needs a world to work!");const n=this.world.scene.three;for(const t of this.selection){const s=t.label.three;e?(n.add(t.mesh),t.mesh.add(s)):(t.mesh.removeFromParent(),s.removeFromParent())}}unselect(){this.preview.removeFromParent(),this._currentSelelection=null}updateSelection(e,n,t){if(!this.world)throw new Error("The face measurement needs a world to work!");this.world.scene.three.add(this.preview);const r=this.components.get(C).getFace(e,n,t);if(r===null)return;const a=this.regenerateHighlight(e,r.indices,t);let m=0;for(const{distance:w}of r.edges)m+=w;this._currentSelelection={perimeter:m,area:a}}newLabel(e,n){if(!e.boundingSphere)throw new Error("Error computing area geometry");if(!this.world)throw new Error("The face measurement needs a world to work!");const{center:t}=e.boundingSphere,s=H(),o=Math.trunc(n*100)/100;s.textContent=o.toString();const r=new W(this.world,s);return r.three.position.copy(t),r}regenerateHighlight(e,n,t){const s=[],o=[];let r=0,a=0;const m=new j,w=this.components.get(C);for(const B of n){const{p1:g,p2:b,p3:v}=w.getVerticesAndNormal(e,B,t);s.push(g.x,g.y,g.z),s.push(b.x,b.y,b.z),s.push(v.x,v.y,v.z),m.set(g,b,v),a+=m.getArea(),o.push(r,r+1,r+2),r+=3}const L=new Float32Array(s),T=new k(L,3);return this.preview.geometry.setAttribute("position",T),this.preview.geometry.setIndex(o),a}};c(y,"uuid","30279548-1309-44f6-aa97-ce26eed73522");let S=y;const J=document.getElementById("container"),h=new R,Q=h.get(z),d=Q.create();d.scene=new O(h);d.renderer=new q(h,J);d.camera=new U(h);h.init();d.camera.controls.setLookAt(5,5,5,0,0,0);d.scene.setup();const X=h.get(G);X.create(d);const p=new S(h);p.world=d;p.enabled=!0;const Y=new V(h),Z=await fetch("https://thatopen.github.io/engine_components/resources/small.frag"),$=await Z.arrayBuffer(),ee=new Uint8Array($),F=Y.load(ee);d.scene.three.add(F);for(const i of F.children)i instanceof u&&d.meshes.add(i);let M;window.addEventListener("keydown",i=>{i.code==="KeyO"?p.delete():i.code==="KeyS"?(M=p.get(),p.deleteAll()):i.code==="KeyL"&&M&&p.set(M)});const f=new K;f.showPanel(2);document.body.append(f.dom);f.dom.style.left="0px";d.renderer.onBeforeUpdate.add(()=>f.begin());d.renderer.onAfterUpdate.add(()=>f.end());
