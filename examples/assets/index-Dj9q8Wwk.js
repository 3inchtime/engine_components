var m=Object.defineProperty;var S=(e,s,t)=>s in e?m(e,s,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[s]=t;var r=(e,s,t)=>(S(e,typeof s!="symbol"?s+"":s,t),t);import{ax as l,ay as F,az as L,aA as T,ap as h}from"./web-ifc-api-CmZKgq4q.js";import{G as E}from"./ifc-geometry-types-C3SKrzrZ.js";import{C as x}from"./index-D-_Rgxo_.js";const o=class o extends x{constructor(t){super(t);r(this,"enabled",!0);t.add(o.uuid,this)}async export(t,i,f=!1,I=!0){const n={},c=new Set(t.GetIfcEntityList(i)),p=new Set([l,F,L,T,h]);for(const a of p)c.add(a);for(const a of c){if(E.has(a))continue;const y=p.has(a)&&I,C=t.GetLineIDsWithType(i,a);for(const G of C){const u=t.GetLine(0,G,y,f);n[u.expressID]=u}}return n}};r(o,"uuid","b32c4332-cd67-436e-ba7f-196646c7a635");let d=o;export{d as I};
