var E=Object.defineProperty;var y=(g,d,t)=>d in g?E(g,d,{enumerable:!0,configurable:!0,writable:!0,value:t}):g[d]=t;var b=(g,d,t)=>(y(g,typeof d!="symbol"?d+"":d,t),t);import{a8 as D,a9 as F,aa as S,ab as C,ac as O,ad as x,ae as v,af as P}from"./index-vsiIwi5G.js";import{a as B,E as w}from"./index-BhNtB8fA.js";import{F as T}from"./index-kR8cL58u.js";import{I as N}from"./properties-utils-D1p3CbSV.js";const L=(g,d,t)=>{var s;const n=t??(()=>{}),i={},r=Object.keys(g);for(const o of r){const a=g[o];if(!a)continue;const A=a.type===d,M=Object.keys(a).find(p=>p.startsWith("Relating")),l=Object.keys(a).find(p=>p.startsWith("Related"));if(!(A&&M&&l))continue;const c=g[(s=a[M])==null?void 0:s.value],u=a[l];if(!c||!u||!(u&&Array.isArray(u)))continue;const f=u.map(p=>p.value);n(c.expressID,f),i[c.expressID]=f}return i},R=class R extends B{constructor(t){super(t);b(this,"onDisposed",new w);b(this,"enabled",!0);b(this,"inverseAttributes",["IsDecomposedBy","Decomposes","AssociatedTo","HasAssociations","ClassificationForObjects","IsGroupedBy","HasAssignments","IsDefinedBy","DefinesOcurrence","IsTypedBy","Types","Defines","ContainedInStructure","ContainsElements"]);b(this,"inverseAttributesToProcess",["HasAssignments","IsDecomposedBy","IsDefinedBy","IsTypedBy","HasAssociations","ContainedInStructure"]);b(this,"relToAttributesMap",new Map);b(this,"relationMaps",{});b(this,"onFragmentsDisposed",t=>{delete this.relationMaps[t.groupID]});this.components.add(R.uuid,this),t.get(T).onFragmentsDisposed.add(this.onFragmentsDisposed),this.setRelMap()}getAttributeRels(t){const e=[];for(const[n,i]of this.relToAttributesMap.entries()){const{forRelating:r,forRelated:s}=i;(r===t||s===t)&&e.push(n)}return e}setRelMap(){this.relToAttributesMap.set(D,{forRelating:"IsDecomposedBy",forRelated:"Decomposes"}),this.relToAttributesMap.set(F,{forRelating:"AssociatedTo",forRelated:"HasAssociations"}),this.relToAttributesMap.set(S,{forRelating:"ClassificationForObjects",forRelated:"HasAssociations"}),this.relToAttributesMap.set(C,{forRelating:"IsGroupedBy",forRelated:"HasAssignments"}),this.relToAttributesMap.set(O,{forRelated:"IsDefinedBy",forRelating:"DefinesOcurrence"}),this.relToAttributesMap.set(x,{forRelated:"IsTypedBy",forRelating:"Types"}),this.relToAttributesMap.set(v,{forRelated:"IsDefinedBy",forRelating:"Defines"}),this.relToAttributesMap.set(P,{forRelated:"ContainedInStructure",forRelating:"ContainsElements"})}async process(t){if(!t.hasProperties)throw new Error("FragmentsGroup properties not found");this.relationMaps[t.uuid]=new Map;const e=this.relationMaps[t.uuid];for(const n of this.inverseAttributesToProcess){const i=this.getAttributeRels(n);for(const r of i)await N.getRelationMap(t,r,async(s,o)=>{const a=this.relToAttributesMap.get(r);if(!a)return;const{forRelated:A,forRelating:M}=a;if(M&&this.inverseAttributesToProcess.includes(M)){const l=e.get(s)??new Map,c=this.inverseAttributes.indexOf(M);l.set(c,o),e.set(s,l)}if(A&&this.inverseAttributesToProcess.includes(A))for(const l of o){const c=e.get(l)??new Map,u=this.inverseAttributes.indexOf(A),f=c.get(u)??[];f.push(s),c.set(u,f),e.set(l,c)}})}return e}async processFromWebIfc(t,e){const n=new Map,i={},r=t.GetAllLines(e);for(let s=0;s<r.size();s++){const o=r.get(s),a=await t.properties.getItemProperties(e,o);i[o]=a}for(const s of this.inverseAttributesToProcess){const o=this.getAttributeRels(s);for(const a of o)L(i,a,(A,M)=>{const l=this.relToAttributesMap.get(a);if(!l)return;const{forRelated:c,forRelating:u}=l;if(u&&this.inverseAttributesToProcess.includes(u)){const f=n.get(A)??new Map,p=this.inverseAttributes.indexOf(u);f.set(p,M),n.set(A,f)}if(c&&this.inverseAttributesToProcess.includes(c))for(const f of M){const p=n.get(f)??new Map,h=this.inverseAttributes.indexOf(c),I=p.get(h)??[];I.push(A),p.set(h,I),n.set(f,p)}})}return n}getEntityRelations(t,e,n){const i=this.relationMaps[t.uuid];if(!i)return null;const r=i.get(e),s=this.inverseAttributes.indexOf(n);if(!r||s===-1)return null;const o=r.get(s);return o||null}serializeRelations(t){const e={};for(const[n,i]of t.entries()){e[n]||(e[n]={});for(const[r,s]of i.entries())e[n][r]=s}return JSON.stringify(e)}serializeModelRelations(t){const e=this.relationMaps[t.uuid];return e?this.serializeRelations(e):null}serializeAllRelations(){const t={};for(const e in this.relationMaps){const n=this.relationMaps[e],i={};for(const[r,s]of n.entries()){i[r]||(i[r]={});for(const[o,a]of s.entries())i[r][o]=a}t[e]=i}return JSON.stringify(t)}getRelationsMapFromJSON(t){const e=JSON.parse(t),n=new Map;for(const i in e){const r=e[i],s=new Map;for(const o in r)s.set(Number(o),r[o]);n.set(Number(i),s)}return n}dispose(){this.relationMaps={},this.components.get(T).onFragmentsDisposed.remove(this.onFragmentsDisposed),this.onDisposed.trigger(R.uuid),this.onDisposed.reset()}};b(R,"uuid","23a889ab-83b3-44a4-8bee-ead83438370b");let m=R;export{m as I};
