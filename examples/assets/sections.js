import{V as h,b as k,L as F,C as L}from"./web-ifc-api-Dlf_dxms.js";import{p as B,A as U,e as O,_ as T,O as x,T as D,F as M,U as P}from"./index-6e07lNWw.js";import{T as G,z as p,m as f}from"./index-DtbylpTq.js";import{S as W}from"./stats.min-bmkVNhZk.js";import{P as _,A as z,u as R,O as $}from"./index-DDq_E_eW.js";const j=document.getElementById("container"),t=new B,v=t.get(U),e=v.create();e.scene=new O(t);e.renderer=new _(t,j);e.camera=new T(t);e.renderer.postproduction.enabled=!0;e.renderer.postproduction.customEffects.outlineEnabled=!0;t.init();e.camera.controls.setLookAt(12,6,8,0,0,-10);e.scene.setup();const C=t.get(x);C.config.color.setHex(6710886);const I=C.create(e);I.three.position.y-=1;e.renderer.postproduction.customEffects.excludedMeshes.push(I.three);e.scene.three.background=null;const g=t.get(D),N=await fetch("https://thatopen.github.io/engine_components/resources/small.frag"),V=await N.arrayBuffer(),q=new Uint8Array(V),s=g.load(q);e.scene.three.add(s);const H=await fetch("https://thatopen.github.io/engine_components/resources/small.json"),J=await H.json();s.setLocalProperties(J);const r=new W;r.showPanel(2);document.body.append(r.dom);r.dom.style.left="0px";r.dom.style.zIndex="unset";e.renderer.onBeforeUpdate.add(()=>r.begin());e.renderer.onAfterUpdate.add(()=>r.end());const d=t.get(z);d.world=e;const b=d.create({name:"Section 01",id:"1234",normal:new h(-1,0,0),point:new h(1.5,0,0)}),l=t.get(R);l.setup({world:e});const K=t.get(M),i=K.create(e);for(const n of s.items)i.add(n.mesh);i.needsUpdate=!0;e.camera.controls.addEventListener("sleep",()=>{i.needsUpdate=!0});const c=t.get(P),o=t.get($);c.byModel(s.uuid,s);c.byEntity(s);const A=c.find({models:[s.uuid]}),w=c.find({entities:["IFCWALLSTANDARDCASE","IFCWALL","IFCSLAB"]}),y=c.find({entities:["IFCDOOR","IFCWINDOW","IFCPLATE","IFCMEMBER"]}),Q=new k({color:"gray",side:2}),X=new F({color:"black"}),Y=new k({color:"black",opacity:.5,side:2,transparent:!0});o.styles.create("thick",new Set,e,X,Q,Y);for(const n in w){const a=g.list.get(n);if(!a)continue;const{mesh:u}=a;o.styles.list.thick.fragments[n]=new Set(w[n]),o.styles.list.thick.meshes.add(u)}o.styles.create("thin",new Set,e);for(const n in y){const a=g.list.get(n);if(!a)continue;const{mesh:u}=a;o.styles.list.thin.fragments[n]=new Set(y[n]),o.styles.list.thin.meshes.add(u)}await o.update(!0);G.init();const E=p.create(()=>f`
  <bim-panel active label="Sections Tutorial" class="options-menu">
      <bim-panel-section collapsed name="sections" label="Section list">
      </bim-panel-section>
    </bim-panel>
    `);document.body.append(E);const Z=e.renderer.postproduction.customEffects.minGloss,m=new L("white"),S=E.querySelector("bim-panel-section[name='sections']"),ee=p.create(()=>f`
      <bim-button checked label="${b.name}"
        @click="${()=>{e.renderer.postproduction.customEffects.minGloss=.1,l.backupColor=m,c.setColor(A,m),e.scene.three.background=m,d.goTo(b.id),i.needsUpdate=!0}}">
      </bim-button>
    `);S.append(ee);const te=e.scene.three.background,ne=p.create(()=>f`
      <bim-button checked label="Exit"
        @click="${()=>{l.backupColor=null,l.clear(),e.renderer.postproduction.customEffects.minGloss=Z,c.resetColor(A),e.scene.three.background=te,d.exit(),i.needsUpdate=!0}}">
      </bim-button>
    `);S.append(ne);
