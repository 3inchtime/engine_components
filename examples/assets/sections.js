import{V as b,b as k,L,C as F}from"./web-ifc-api-JuXSH2nk.js";import{o as B,a as M,M as x,n as D,h as U,_ as R,c as $,b as G}from"./index-DtdmE_hK.js";import{d as O,R as p,m as f}from"./index-CqPyogbW.js";import{S as T}from"./stats.min-GTpOrGrX.js";import{$ as W,A as _,r as P,K as j}from"./index-Cm7YlCft.js";import"./_commonjsHelpers-Cpj98o6Y.js";const v=document.getElementById("container"),t=new B,K=t.get(M),e=K.create();e.scene=new x(t);e.renderer=new W(t,v);e.camera=new D(t);e.renderer.postproduction.enabled=!0;e.renderer.postproduction.customEffects.outlineEnabled=!0;t.init();e.camera.controls.setLookAt(12,6,8,0,0,-10);e.scene.setup();const C=t.get(U);C.config.color.setHex(6710886);const I=C.create(e);I.three.position.y-=1;e.renderer.postproduction.customEffects.excludedMeshes.push(I.three);e.scene.three.background=null;const h=t.get(R),N=await fetch("https://thatopen.github.io/engine_components/resources/small.frag"),V=await N.arrayBuffer(),q=new Uint8Array(V),s=h.load(q);e.scene.three.add(s);const z=await fetch("https://thatopen.github.io/engine_components/resources/small.json"),H=await z.json();s.setLocalProperties(H);const c=new T;c.showPanel(2);document.body.append(c.dom);c.dom.style.left="0px";c.dom.style.zIndex="unset";e.renderer.onBeforeUpdate.add(()=>c.begin());e.renderer.onAfterUpdate.add(()=>c.end());const d=t.get(_);d.world=e;const g=d.create({name:"Section 01",id:"1234",normal:new b(-1,0,0),point:new b(1.5,0,0)}),l=t.get(P);l.setup({world:e});const J=t.get($),i=J.create(e);for(const n of s.items)i.add(n.mesh);i.needsUpdate=!0;e.camera.controls.addEventListener("sleep",()=>{i.needsUpdate=!0});const r=t.get(G),o=t.get(j);r.byModel(s.uuid,s);r.byEntity(s);const E=r.find({models:[s.uuid]}),w=r.find({entities:["IFCWALLSTANDARDCASE","IFCWALL","IFCSLAB"]}),y=r.find({entities:["IFCDOOR","IFCWINDOW","IFCPLATE","IFCMEMBER"]}),Q=new k({color:"gray",side:2}),X=new L({color:"black"}),Y=new k({color:"black",opacity:.5,side:2,transparent:!0});o.styles.create("thick",new Set,e,X,Q,Y);for(const n in w){const a=h.list.get(n);if(!a)continue;const{mesh:u}=a;o.styles.list.thick.fragments[n]=new Set(w[n]),o.styles.list.thick.meshes.add(u)}o.styles.create("thin",new Set,e);for(const n in y){const a=h.list.get(n);if(!a)continue;const{mesh:u}=a;o.styles.list.thin.fragments[n]=new Set(y[n]),o.styles.list.thin.meshes.add(u)}await o.update(!0);O.init();const S=p.create(()=>f`
  <bim-panel active label="Sections Tutorial" class="options-menu">
      <bim-panel-section collapsed name="sections" label="Section list">
      </bim-panel-section>
    </bim-panel>
    `);document.body.append(S);const Z=e.renderer.postproduction.customEffects.minGloss,m=new F("white"),A=S.querySelector("bim-panel-section[name='sections']"),ee=p.create(()=>f`
      <bim-button checked label="${g.name}"
        @click="${()=>{e.renderer.postproduction.customEffects.minGloss=.1,l.backupColor=m,r.setColor(E,m),e.scene.three.background=m,d.goTo(g.id),i.needsUpdate=!0}}">
      </bim-button>
    `);A.append(ee);const te=e.scene.three.background,ne=p.create(()=>f`
      <bim-button checked label="Exit"
        @click="${()=>{l.backupColor=null,l.clear(),e.renderer.postproduction.customEffects.minGloss=Z,r.resetColor(E),e.scene.three.background=te,d.exit(),i.needsUpdate=!0}}">
      </bim-button>
    `);A.append(ne);
