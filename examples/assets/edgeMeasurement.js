var S=Object.defineProperty;var _=(n,c,e)=>c in n?S(n,c,{enumerable:!0,configurable:!0,writable:!0,value:e}):n[c]=e;var i=(n,c,e)=>(_(n,typeof c!="symbol"?c+"":c,e),e);import{L as K,V as v,M as x,I as T}from"./web-ifc-api-z0lP7pyY.js";import{S as z}from"./stats.min-GTpOrGrX.js";import{J as I,D as B,H as U,P as k,p as O,C as V,i as j,k as F,a as H,u as N}from"./index-CDtayhLQ.js";import"./import-wrapper-prod-QYycmO-A.js";import{P as R}from"./index-B7ETzHmE.js";import{S as J}from"./index-CFf2h0e8.js";import{L as p}from"./index-K1hO-0Va.js";import"./_commonjsHelpers-Cpj98o6Y.js";import"./renderer-with-2d-ChbkiKqX.js";import"./mark-C_hqAPZ-.js";import"./dimension-mark-BiAWnjiH.js";import"./graphic-vertex-picker-DIlRP4wd.js";const g=class g extends I{constructor(e){super(e);i(this,"preview");i(this,"tolerance",.3);i(this,"world");i(this,"onDisposed",new B);i(this,"_enabled",!1);i(this,"_lineMaterial",new K({color:"#DC2626",linewidth:2,depthTest:!1,transparent:!0}));i(this,"create",async()=>{if(!this.preview||!this.enabled||!this.preview.visible)return;const e=this.components.get(p);e.world=this.world;const s=this.preview.startPoint.clone(),t=this.preview.endPoint.clone();e.createOnPoints(s,t)});i(this,"onMouseMove",()=>{if(!this.preview)return;if(!this.world)throw new Error("The edge measurement needs a world to work!");if(!this.enabled){this.preview.visible=!1;return}const t=this.components.get(U).get(this.world).castRay();if(!t||!t.object){this.preview.visible=!1;return}const{object:r,faceIndex:d,point:a}=t;if(d===void 0){this.preview.visible=!1;return}r instanceof x||r instanceof T?this.updateSelection(r,a,d,t.instanceId):this.preview.visible=!1});i(this,"onKeydown",e=>{});this.components.add(g.uuid,this)}set enabled(e){if(this._enabled=e,this.setupEvents(e),e){if(!this.world)throw new Error("The edge measurement needs a world to work!");if(!this.preview){const s=document.createElement("div");s.className="w-2 h-2 bg-red-600 rounded-full",this.preview=new J(this.components,this.world,{start:new v,end:new v,lineMaterial:this._lineMaterial,endpointElement:s}),this.preview.visible=!1}}else this.cancelCreation()}get enabled(){return this._enabled}dispose(){this.preview&&this.preview.dispose(),this._lineMaterial.dispose(),this.setupEvents(!1),this.onDisposed.trigger(),this.onDisposed.reset(),this.components=null}delete(){if(!this.enabled)return;const e=this.components.get(p),s=e.enabled;e.enabled=!0,e.delete(),e.enabled=s}deleteAll(){this.components.get(p).deleteAll()}endCreation(){}cancelCreation(){}get(){const s=this.components.get(p).list,t=[];for(const r of s){const d=r.startPoint,a=r.endPoint,w=[d.x,d.y,d.z,a.x,a.y,a.z];t.push(w)}return t}set(e){const s=this.components.get(p);s.world=this.world;for(const t of e){const[r,d,a,w,u,m]=t,b=new v(r,d,a),y=new v(w,u,m);s.createOnPoints(b,y)}}setupEvents(e){if(!this.world)throw new Error("The edge measurement needs a world to work!");if(this.world.isDisposing)return;if(!this.world.renderer)throw new Error("The world of the edge measurement needs a renderer!");const t=this.world.renderer.three.domElement.parentElement;e?(t.addEventListener("click",this.create),t.addEventListener("mousemove",this.onMouseMove),window.addEventListener("keydown",this.onKeydown)):(t.removeEventListener("click",this.create),t.removeEventListener("mousemove",this.onMouseMove),window.removeEventListener("keydown",this.onKeydown))}updateSelection(e,s,t,r){if(!this.preview||!e.geometry.index)return;const a=this.components.get(k).getFace(e,t,r);if(!a)return;const{edges:w}=a;let u=Number.MAX_VALUE,m=[];for(const P of w){const[D,C]=P.points,E=k.distanceFromPointToLine(s,D,C,!0);E<this.tolerance&&E<u&&(u=E,m=P.points)}if(!m.length){this.preview.visible=!1;return}const[b,y]=m;this.preview.startPoint=b,this.preview.endPoint=y,this.preview.visible=!0}};i(g,"uuid","e7be5749-89df-4514-8d25-83aa38ce12d8");let M=g;const X=document.getElementById("container"),l=new O,q=l.get(V),o=q.create();o.scene=new j(l);o.renderer=new R(l,X);o.camera=new F(l);l.init();o.camera.controls.setLookAt(5,5,5,0,0,0);o.scene.setup();const G=l.get(H);G.create(o);const h=new M(l);h.world=o;h.enabled=!0;const Q=new N(l),W=await fetch("https://thatopen.github.io/engine_components/resources/small.frag"),Y=await W.arrayBuffer(),Z=new Uint8Array(Y),A=Q.load(Z);o.scene.three.add(A);for(const n of A.children)n instanceof x&&o.meshes.add(n);let L;window.addEventListener("keydown",n=>{n.code==="KeyO"?h.delete():n.code==="KeyS"?(L=h.get(),h.deleteAll()):n.code==="KeyL"&&L&&h.set(L)});const f=new z;f.showPanel(2);document.body.append(f.dom);f.dom.style.left="0px";o.renderer.onBeforeUpdate.add(()=>f.begin());o.renderer.onAfterUpdate.add(()=>f.end());
