var f=Object.defineProperty;var g=(d,n,e)=>n in d?f(d,n,{enumerable:!0,configurable:!0,writable:!0,value:e}):d[n]=e;var t=(d,n,e)=>(g(d,typeof n!="symbol"?n+"":n,e),e);import{L as u,V as m,O as _}from"./web-ifc-api-BiYij3qq.js";import{J as v,U as l,H as c}from"./index-B3b_h8A8.js";import{S as b}from"./index-Csb2AJ1X.js";import{n as p}from"./dimension-mark-BiAWnjiH.js";import{G as x}from"./graphic-vertex-picker-C182o4t3.js";const h=class h extends v{constructor(e){super(e);t(this,"onDisposed",new l);t(this,"onBeforeUpdate",new l);t(this,"onAfterUpdate",new l);t(this,"snapDistance",.25);t(this,"_vertexPicker");t(this,"_lineMaterial",new u({color:"#DC2626",linewidth:2,depthTest:!1}));t(this,"list",[]);t(this,"world");t(this,"_visible",!0);t(this,"_enabled",!1);t(this,"_temp",{isDragging:!1,start:new m,end:new m,dimension:void 0});t(this,"create",e=>{const s=e instanceof _?e:void 0;if(this._enabled){if(!this._temp.isDragging){this.drawStart(s);return}this.endCreation()}});t(this,"onMouseMove",()=>{this.world&&this._vertexPicker.get(this.world)});this.components.add(h.uuid,this),this._vertexPicker=new x(e,{previewElement:p(),snapDistance:this.snapDistance})}get enabled(){return this._enabled}set enabled(e){e||this.cancelCreation(),this._enabled=e,this._vertexPicker.enabled=e,this.setupEvents(e)}get visible(){return this._visible}set visible(e){this._visible=e;for(const s of this.list)s.visible=e}get color(){return this._lineMaterial.color}set color(e){this._lineMaterial.color=e}dispose(){this.setupEvents(!1),this.enabled=!1;for(const e of this.list)e.dispose();this._lineMaterial.dispose(),this.list=[],this._vertexPicker.dispose(),this.onDisposed.trigger(h.uuid),this.onDisposed.reset()}async update(e){this._enabled&&this._temp.isDragging&&this.drawInProcess()}createOnPoints(e,s){const i=this.drawDimension();i.startPoint=e,i.endPoint=s,i.createBoundingBox(),this.list.push(i)}delete(){if(!this.world)throw new Error("World is needed for Length Measurement!");if(!this._enabled||this.list.length===0)return;const e=this.getBoundingBoxes(),r=this.components.get(c).get(this.world).castRay(e);if(!r)return;const o=this.list.find(a=>a.boundingBox===r.object);if(o){const a=this.list.indexOf(o);this.list.splice(a,1),o.dispose()}}async deleteMeasurement(e){if(e){const s=this.list.indexOf(e);this.list.splice(s,1),e.dispose()}}deleteAll(){for(const e of this.list)e.dispose();this.list=[]}cancelCreation(){var e;this._temp.dimension&&(this._temp.isDragging=!1,(e=this._temp.dimension)==null||e.dispose(),this._temp.dimension=void 0)}drawStart(e){if(!this.world)throw new Error("The length measurement needs a world to work!");const s=e?[e]:void 0,o=this.components.get(c).get(this.world).castRay(s),a=this._vertexPicker.get(this.world);o&&a&&(this._temp.isDragging=!0,this._temp.start=e?o.point:a)}drawInProcess(){if(!this.world)throw new Error("The length measurement needs a world to work!");if(!this.components.get(c).get(this.world).castRay())return;const r=this._vertexPicker.get(this.world);r&&(this._temp.end=r,this._temp.dimension||(this._temp.dimension=this.drawDimension()),this._temp.dimension.endPoint=this._temp.end)}endCreation(){this._temp.dimension&&(this._temp.dimension.createBoundingBox(),this.list.push(this._temp.dimension),this._temp.dimension=void 0,this._temp.isDragging=!1)}drawDimension(){if(!this.world)throw new Error("The length measurement needs a world to work!");return new b(this.components,this.world,{start:this._temp.start,end:this._temp.end,lineMaterial:this._lineMaterial,endpointElement:p()})}getBoundingBoxes(){return this.list.map(e=>e.boundingBox).filter(e=>e!==void 0)}setupEvents(e){if(!this.world)throw new Error("The length measurement needs a world to work!");if(!this.world.renderer)throw new Error("The world of the length measurement needs a renderer!");const i=this.world.renderer.three.domElement.parentElement;i&&(i.removeEventListener("click",this.create),e&&i.addEventListener("mousemove",this.onMouseMove))}};t(h,"uuid","2f9bcacf-18a9-4be6-a293-e898eae64ea1");let w=h;export{w as L};
