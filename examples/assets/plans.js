import{b as w,L as F,C as A}from"./web-ifc-api-Dlf_dxms.js";import{p as L,A as P,e as S,_ as B,O as U,T as O,F as T,U as x}from"./index-6e07lNWw.js";import{P as D,f as M,u as G,O as W}from"./index-DDq_E_eW.js";import{T as _,z as m,m as f}from"./index-DtbylpTq.js";import{S as z}from"./stats.min-bmkVNhZk.js";const R=document.getElementById("container"),n=new L,$=n.get(P),e=$.create();e.scene=new S(n);e.renderer=new D(n,R);e.camera=new B(n);e.renderer.postproduction.enabled=!0;e.renderer.postproduction.customEffects.outlineEnabled=!0;n.init();e.camera.controls.setLookAt(12,6,8,0,0,-10);e.scene.setup();const y=n.get(U);y.config.color.setHex(6710886);const k=y.create(e);k.three.position.y-=1;e.renderer.postproduction.customEffects.excludedMeshes.push(k.three);e.scene.three.background=null;const g=n.get(O),j=await fetch("https://thatopen.github.io/engine_components/resources/small.frag"),v=await j.arrayBuffer(),N=new Uint8Array(v),s=g.load(N);e.scene.three.add(s);const q=await fetch("https://thatopen.github.io/engine_components/resources/small.json"),H=await q.json();s.setLocalProperties(H);const c=new z;c.showPanel(2);document.body.append(c.dom);c.dom.style.left="0px";c.dom.style.zIndex="unset";e.renderer.onBeforeUpdate.add(()=>c.begin());e.renderer.onAfterUpdate.add(()=>c.end());const i=n.get(M);i.world=e;await i.generate(s);const d=n.get(G);d.setup({world:e});const V=n.get(T),l=V.create(e);for(const t of s.items)l.add(t.mesh);l.needsUpdate=!0;e.camera.controls.addEventListener("sleep",()=>{l.needsUpdate=!0});const a=n.get(x),r=n.get(W);a.byModel(s.uuid,s);a.byEntity(s);const C=a.find({models:[s.uuid]}),h=a.find({entities:["IFCWALLSTANDARDCASE","IFCWALL"]}),b=a.find({entities:["IFCDOOR","IFCWINDOW","IFCPLATE","IFCMEMBER"]}),J=new w({color:"gray",side:2}),K=new F({color:"black"}),Q=new w({color:"black",opacity:.5,side:2,transparent:!0});r.styles.create("thick",new Set,e,K,J,Q);for(const t in h){const o=g.list.get(t);if(!o)continue;const{mesh:u}=o;r.styles.list.thick.fragments[t]=new Set(h[t]),r.styles.list.thick.meshes.add(u)}r.styles.create("thin",new Set,e);for(const t in b){const o=g.list.get(t);if(!o)continue;const{mesh:u}=o;r.styles.list.thin.fragments[t]=new Set(b[t]),r.styles.list.thin.meshes.add(u)}await r.update(!0);_.init();const E=m.create(()=>f`
  <bim-panel active label="Plans Tutorial" class="options-menu">
      <bim-panel-section collapsed name="floorPlans" label="Plan list">
      </bim-panel-section>
    </bim-panel>
    `);document.body.append(E);const X=e.renderer.postproduction.customEffects.minGloss,p=new A("white"),I=E.querySelector("bim-panel-section[name='floorPlans']");for(const t of i.list){const o=m.create(()=>f`
      <bim-button checked label="${t.name}"
        @click="${()=>{e.renderer.postproduction.customEffects.minGloss=.1,d.backupColor=p,a.setColor(C,p),e.scene.three.background=p,i.goTo(t.id),l.needsUpdate=!0}}">
      </bim-button>
    `);I.append(o)}const Y=e.scene.three.background,Z=m.create(()=>f`
      <bim-button checked label="Exit"
        @click="${()=>{d.backupColor=null,d.clear(),e.renderer.postproduction.customEffects.minGloss=X,a.resetColor(C),e.scene.three.background=Y,i.exitPlanView(),l.needsUpdate=!0}}">
      </bim-button>
    `);I.append(Z);
