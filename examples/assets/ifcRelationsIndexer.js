import"./index-vsiIwi5G.js";import{C as m}from"./index-BhNtB8fA.js";import{I as d}from"./properties-utils-D1p3CbSV.js";import{I as w}from"./index-B2MoojNg.js";import{F as g}from"./index-DIMmpvZj.js";import"./index-kR8cL58u.js";import"./ifc-metadata-reader-ChV0ZuWd.js";import"./ifc-fragment-settings-DfFyvBfD.js";import"./ifc-geometry-types-C3SKrzrZ.js";const c=new m,p=c.get(g);await p.setup();const u=await fetch("/resources/small.ifc"),R=await u.arrayBuffer(),y=new Uint8Array(R),e=await p.load(y),t=c.get(w);await t.process(e);const r=t.getEntityRelations(e,6518,"IsDefinedBy");if(r)for(const o of r){const n=await e.getProperties(o);console.log(n),await d.getPsetProps(e,o,async a=>{const s=await e.getProperties(a);console.log(s)})}const f=(o,n)=>{const a=new File([o],n),s=document.createElement("a");s.href=URL.createObjectURL(a),s.download=a.name,s.click(),URL.revokeObjectURL(s.href)},l=t.serializeModelRelations(e);l&&f(l,"small-relations.json");const I=t.serializeAllRelations();f(I,"relations-index-all.json");delete t.relationMaps[e.uuid];const j=await fetch("/resources/small-relations.json");t.relationMaps[e.uuid]=t.getRelationsMapFromJSON(await j.text());const i=t.getEntityRelations(e,6518,"ContainedInStructure");if(i&&i[0]){const o=await e.getProperties(i[0]);console.log(o)}
