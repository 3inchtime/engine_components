import"./web-ifc-api-Glg4rFxW.js";import{C as m}from"./index-BjtWM7Op.js";import{I as d}from"./properties-utils-CJ1nLVj1.js";import{I as w}from"./index-BE9dEvJa.js";import{F as g}from"./index-CSKQgp6F.js";import"./index-BHbmf4IB.js";import"./ifc-metadata-reader-COLrjkt6.js";import"./ifc-fragment-settings-DLKS16yU.js";import"./ifc-geometry-types-C3SKrzrZ.js";const c=new m,p=c.get(g);await p.setup();const R=await fetch("/resources/small.ifc"),u=await R.arrayBuffer(),I=new Uint8Array(u),e=await p.load(I),t=c.get(w);await t.process(e);const r=t.getEntityRelations(e,6518,"IsDefinedBy");if(r)for(const o of r){const a=await e.getProperties(o);console.log(a),await d.getPsetProps(e,o,async n=>{const s=await e.getProperties(n);console.log(s)})}const f=(o,a)=>{const n=new File([o],a),s=document.createElement("a");s.href=URL.createObjectURL(n),s.download=n.name,s.click(),URL.revokeObjectURL(s.href)},l=t.serializeModelRelations(e);l&&f(l,"small-relations.json");const y=t.serializeAllRelations();f(y,"relations-index-all.json");delete t.relationMaps[e.uuid];const x=await fetch("/resources/small-relations.json"),j=t.getRelationsMapFromJSON(await x.text());t.setRelationMap(e,j);const i=t.getEntityRelations(e,6518,"ContainedInStructure");if(i&&i[0]){const o=await e.getProperties(i[0]);console.log(o)}
