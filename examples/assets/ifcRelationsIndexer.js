import"./web-ifc-api-DH5A5LIH.js";import{C as d}from"./index-CyDQMoMp.js";import{I as m,a as w}from"./index-JlpMfDan.js";import{F as g}from"./index-BJij5QgN.js";import"./ifc-metadata-reader-Gnixi9ug.js";import"./ifc-fragment-settings-B1HGQKzE.js";import"./ifc-geometry-types-C3SKrzrZ.js";const c=new d,p=c.get(g);await p.setup();const R=await fetch("/resources/small.ifc"),u=await R.arrayBuffer(),y=new Uint8Array(u),e=await p.load(y),t=c.get(m);await t.process(e);const r=t.getEntityRelations(e,6518,"IsDefinedBy");if(r)for(const o of r){const n=await e.getProperties(o);console.log(n),await w.getPsetProps(e,o,async a=>{const s=await e.getProperties(a);console.log(s)})}const f=(o,n)=>{const a=new File([o],n),s=document.createElement("a");s.href=URL.createObjectURL(a),s.download=a.name,s.click(),URL.revokeObjectURL(s.href)},l=t.serializeModelRelations(e);l&&f(l,"small-relations.json");const I=t.serializeAllRelations();f(I,"relations-index-all.json");delete t.relationMaps[e.uuid];const x=await fetch("/resources/small-relations.json"),j=t.getRelationsMapFromJSON(await x.text());t.setRelationMap(e,j);const i=t.getEntityRelations(e,6518,"ContainedInStructure");if(i&&i[0]){const o=await e.getProperties(i[0]);console.log(o)}
