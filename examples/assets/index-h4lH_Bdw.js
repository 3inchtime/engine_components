var w=Object.defineProperty;var u=(s,t,e)=>t in s?w(s,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):s[t]=e;var n=(s,t,e)=>(u(s,typeof t!="symbol"?t+"":t,e),e);import{a as f,b as V}from"./index-l4fssrkN.js";const h=class h extends f{constructor(e){super(e);n(this,"view","vertical");n(this,"enabled",!0);this.components.add(h.uuid,this)}set world(e){this.world!==e&&(super.world=e,this.highlighter&&this.highlighter.onSelect.add(p=>{if(!this.world)throw new Error("A world is needed to work with this component!");const o=this.components.get(V);o.deleteByType(["Slope","Height","InitialKPV","FinalKPV"]);const{alignment:r}=p.curve,d=[];for(const i of r.vertical){const l=i.mesh.geometry.attributes.position.array;d.push(l)}const{defSegments:g,slope:m}=this.setDefSegments(d),a=this.world.scene.three;for(let i=0;i<r.vertical.length;i++){const l=r.vertical[i];o.addVerticalMarker(this.world,`S: ${m[i].slope}%`,l.mesh,"Slope",a),o.addVerticalMarker(this.world,`H: ${g[i].end.y.toFixed(2)}`,l.mesh,"Height",a)}o.addVerticalMarker(this.world,"KP: 0",r.vertical[0].mesh,"InitialKPV",a),o.addVerticalMarker(this.world,`KP: ${r.vertical.length}`,r.vertical[r.vertical.length-1].mesh,"FinalKPV",a)}))}};n(h,"uuid","097eea29-2d5a-431a-a247-204d44670621");let c=h;export{c as C};
