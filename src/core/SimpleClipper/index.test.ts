// Generated by CodiumAI

/*
Code Analysis

Main functionalities:
The SimpleClipper class is a lightweight component that simplifies the creation
and handling of clipping planes in Three.js. It allows the user to create,
delete, and manipulate clipping planes with ease, and provides a simple UI element
to toggle the visibility and enable/disable the component. It also provides events
to handle the dragging of clipping planes and allows the user to customize the
material and size of the clipping plane representation.

Methods:
- create(): creates a new clipping plane at the intersection point of the raycaster.
- delete(plane?: Plane): deletes the specified plane or the first plane found under the cursor.
- deleteAll(): deletes all existing clipping planes.
- createFromNormalAndCoplanarPoint(normal: THREE.Vector3, point: THREE.Vector3): creates a plane in a certain place and with a certain orientation, without the need of the mouse.
- dispose(): disposes of the component and all its planes.
- newPlaneInstance(point: THREE.Vector3, normal: THREE.Vector3): creates a new instance of the specified plane type.
- updateMaterials(): updates the materials of all the meshes in the scene to reflect the current clipping planes.

Fields:
- name: the name of the component.
- afterCreate: an event that fires after a new plane is created.
- afterDelete: an event that fires after a plane is deleted.
- orthogonalY: whether to force the clipping plane to be orthogonal in the Y direction.
- toleranceOrthogonalY: the tolerance that determines whether a horizontallish clipping plane will be forced to be orthogonal to the Y direction.
- beforeDrag: an event that fires when the user starts dragging a clipping plane.
- afterDrag: an event that fires when the user stops dragging a clipping plane.
- _planes: an array of all the clipping planes created by the component.
- _size: the size of the geometric representation of the clipping planes.
- _enabled: whether the component is enabled.
- _visible: whether the component is visible.
- _material: the material used in all the clipping planes.
*/

import testComponents from "../../test/mock/testComponents";

import * as THREE from "three";

import { SimplePlane } from "./simple-plane";
import { SimpleClipper } from "./index";

const components = testComponents();

describe("SimpleClipper", () => {
  // Tests that a new instance of SimpleClipper can be created with valid arguments.
  it("test_creating_new_simple_clipper_instance_with_valid_arguments", () => {
    const PlaneType = SimplePlane;
    const clipper = new SimpleClipper(components, PlaneType);
    expect(clipper).toBeInstanceOf(SimpleClipper);
    expect(clipper.components).toBe(components);
    expect(clipper.PlaneType).toBe(PlaneType);
  });

  // Tests that SimpleClipper can be enabled and disabled.
  it("test_enabling_and_disabling_simple_clipper", () => {
    const PlaneType = SimplePlane;
    const clipper = new SimpleClipper(components, PlaneType);
    expect(clipper.enabled).toBe(false);
    clipper.enabled = true;
    expect(clipper.enabled).toBe(true);
    clipper.enabled = false;
    expect(clipper.enabled).toBe(false);
  });

  // Tests that a new clipping plane can be created.
  it("test_creating_new_clipping_plane", () => {
    const PlaneType = SimplePlane;
    const clipper = new SimpleClipper(components, PlaneType);
    clipper.enabled = true;
    const mockIntersection = {
      point: new THREE.Vector3(1, 2, 3),
      face: { normal: new THREE.Vector3(0, 1, 0) },
    };

    // @ts-ignore
    clipper.createPlaneFromIntersection(mockIntersection);
    expect(clipper.get().length).toBe(1);
  });

  // Tests that a clipping plane can be deleted.
  it("test_deleting_clipping_plane", () => {
    const PlaneType = SimplePlane;
    const clipper = new SimpleClipper(components, PlaneType);
    clipper.enabled = true;
    const mockIntersection = {
      point: new THREE.Vector3(1, 2, 3),
      face: { normal: new THREE.Vector3(0, 1, 0) },
    };
    // @ts-ignore
    clipper.createPlaneFromIntersection(mockIntersection);
    const planeToDelete = clipper.get()[0];
    clipper.delete(planeToDelete);
    expect(clipper.get().length).toBe(0);
  });

  // Tests that all clipping planes can be deleted.
  it("test_deleting_all_clipping_planes", () => {
    const PlaneType = SimplePlane;
    const clipper = new SimpleClipper(components, PlaneType);
    clipper.enabled = true;
    const mockIntersection = {
      point: new THREE.Vector3(1, 2, 3),
      face: { normal: new THREE.Vector3(0, 1, 0) },
    };
    // @ts-ignore
    clipper.createPlaneFromIntersection(mockIntersection);
    // @ts-ignore
    clipper.createPlaneFromIntersection(mockIntersection);
    clipper.deleteAll();
    expect(clipper.get().length).toBe(0);
  });

  // Tests that the material of the clipping plane representation can be set.
  it("test_setting_material_of_clipping_plane_representation", () => {
    const PlaneType = SimplePlane;
    const clipper = new SimpleClipper(components, PlaneType);
    const mockMaterial = new THREE.MeshBasicMaterial({ color: 0xff0000 });
    clipper.material = mockMaterial;
    expect(clipper.material).toBe(mockMaterial);
  });
});
