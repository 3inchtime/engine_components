// Generated by CodiumAI

/*
Code Analysis

Main functionalities:
The LocalCacher class is responsible for caching and retrieving files from the local
storage of the browser. It provides functionalities to save, load, and delete files
from the cache. It also manages the toolbar UI for these functionalities.

Methods:
- get(id: string): retrieves a file from the cache with the given id
- save(id: string, url: string): saves a file with the given id and url to the cache
- exists(id: string): checks if a file with the given id exists in the cache
- delete(ids: string[]): deletes files with the given ids from the cache
- deleteAll(): deletes all files from the cache
- getModelFromLocalCache(id: string): retrieves a file from the cache with the given id
- clearStoredIDs(): clears all stored ids from the local storage
- removeStoredID(id: string): removes the given id from the stored ids in the local storage
- addStoredID(id: string): adds the given id to the stored ids in the local storage
- getStoredIDs(): retrieves all stored ids from the local storage
- setStoredIDs(ids: string[]): sets the stored ids in the local storage to the given ids

Fields:
- name: the name of the class
- enabled: a boolean indicating if the class is enabled
- _db: an instance of the ModelDatabase class for managing the cache
- _storedModels: the key for the stored ids in the local storage
- uiElement: the toolbar UI for the caching functionalities
- saveButton: the button for saving files to the cache
- loadButton: the button for loading files from the cache
- wipeButton: the button for deleting files from the cache
*/

import testComponents from "../../test/mock/testComponents";
import { TestLocalCacher } from "../../test/TestLocalCacher";

const components = testComponents();

const url =
  "https://raw.githubusercontent.com/buildingSMART/Sample-Test-Files/master/IFC%202x3/Medical-Dental%20Clinic/Clinic_Architectural.ifc";

describe("LocalCacher", () => {
  // Tests that a model can be successfully saved to local cache.
  it("test_save_model_to_local_cache", async () => {
    const localCacher = new TestLocalCacher(components);
    const id = "test-id";

    await localCacher.save(id, url);
    const stored = await localCacher.get(id);
    expect(stored).not.toBeNull();
  });

  // Tests that a model can be successfully retrieved from local cache.
  it("test_retrieve_model_from_local_cache", async () => {
    const localCacher = new TestLocalCacher(components);
    const id = "test-id";
    const url = "https://example.com/test-model";
    await localCacher.save(id, url);
    const stored = await localCacher.get(id);
    expect(stored).not.toBeNull();
  });

  // Tests that an error is thrown when attempting to save a model with an existing ID.
  it("test_save_model_with_existing_id", async () => {
    const localCacher = new TestLocalCacher(components);
    const id = "test-id";
    const url1 = "https://example.com/test-model1";
    const url2 = "https://example.com/test-model2";
    await localCacher.save(id, url1);
    await expect(localCacher.save(id, url2)).rejects.toThrow();
  });

  // Tests that null is returned when attempting to retrieve a nonexistent model from local cache.
  it("test_retrieve_nonexistent_model_from_local_cache", async () => {
    const localCacher = new TestLocalCacher(components);
    const id = "nonexistent-id";
    const stored = await localCacher.get(id);
    expect(stored).toBeNull();
  });

  // Tests that a model can be successfully deleted from local cache.
  it("test_delete_model_from_local_cache", async () => {
    const localCacher = new TestLocalCacher(components);
    const id = "test-id";
    const url = "https://example.com/test-model";
    await localCacher.save(id, url);
    await localCacher.delete([id]);
    const stored = await localCacher.get(id);
    expect(stored).toBeNull();
  });

  // Tests that all models can be successfully deleted from local cache.
  it("test_delete_all_models_from_local_cache", async () => {
    const localCacher = new TestLocalCacher(components);
    const id1 = "test-id1";
    const id2 = "test-id2";
    const url1 = "https://example.com/test-model1";
    const url2 = "https://example.com/test-model2";
    await localCacher.save(id1, url1);
    await localCacher.save(id2, url2);
    await localCacher.deleteAll();
    const stored1 = await localCacher.get(id1);
    const stored2 = await localCacher.get(id2);
    expect(stored1).toBeNull();
    expect(stored2).toBeNull();
  });
});
