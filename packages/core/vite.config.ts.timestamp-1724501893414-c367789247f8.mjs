// vite.config.ts
import dts from "file:///C:/Users/anton/Desktop/code/engine_components/node_modules/vite-plugin-dts/dist/index.mjs";
import { defineConfig } from "file:///C:/Users/anton/Desktop/code/engine_components/node_modules/vite/dist/node/index.js";
import * as path from "path";
import * as fs from "fs";

// package.json
var peerDependencies = {
  "@thatopen/fragments": "~2.2.0",
  three: "^0.160.1",
  "web-ifc": "0.0.57"
};

// vite.config.ts
var __vite_injected_original_dirname = "C:\\Users\\anton\\Desktop\\code\\engine_components\\packages\\core";
var generateTSNamespace = (dts2) => {
  if (!fs.existsSync("./dist"))
    return;
  console.log("Generating namespace!");
  let types = "";
  dts2.forEach((declaration) => {
    const cleanedType = declaration.replace(/export\s+\*?\s+from\s+"[^"]+";/g, "").replace(/^\s*[\r\n]/gm, "").replace(/`/g, "'");
    types += cleanedType;
  });
  fs.writeFileSync(
    "./dist/namespace.d.ts",
    `declare namespace OBC {
${types}
}`
  );
};
var vite_config_default = defineConfig({
  build: {
    outDir: "./dist",
    lib: {
      entry: path.resolve(__vite_injected_original_dirname, "./src/index.ts"),
      formats: ["es", "cjs"],
      fileName: (format) => {
        const map = {
          cjs: "cjs",
          es: "mjs"
        };
        return `index.${map[format]}`;
      }
    },
    rollupOptions: {
      external: Object.keys(peerDependencies),
      output: {
        globals: {
          three: "THREE",
          "@thatopen/fragments": "FRAGS",
          "web-ifc": "WEB-IFC"
        }
      }
    }
  },
  plugins: [
    dts({
      include: ["./src"],
      exclude: ["./src/**/example.ts", "./src/**/*.test.ts"],
      afterBuild: generateTSNamespace
    })
  ]
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiLCAicGFja2FnZS5qc29uIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiQzpcXFxcVXNlcnNcXFxcYW50b25cXFxcRGVza3RvcFxcXFxjb2RlXFxcXGVuZ2luZV9jb21wb25lbnRzXFxcXHBhY2thZ2VzXFxcXGNvcmVcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZmlsZW5hbWUgPSBcIkM6XFxcXFVzZXJzXFxcXGFudG9uXFxcXERlc2t0b3BcXFxcY29kZVxcXFxlbmdpbmVfY29tcG9uZW50c1xcXFxwYWNrYWdlc1xcXFxjb3JlXFxcXHZpdGUuY29uZmlnLnRzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9DOi9Vc2Vycy9hbnRvbi9EZXNrdG9wL2NvZGUvZW5naW5lX2NvbXBvbmVudHMvcGFja2FnZXMvY29yZS92aXRlLmNvbmZpZy50c1wiOy8qIGVzbGludC1kaXNhYmxlIGltcG9ydC9uby1leHRyYW5lb3VzLWRlcGVuZGVuY2llcyAqL1xyXG5pbXBvcnQgZHRzIGZyb20gXCJ2aXRlLXBsdWdpbi1kdHNcIjtcclxuaW1wb3J0IHsgZGVmaW5lQ29uZmlnIH0gZnJvbSBcInZpdGVcIjtcclxuaW1wb3J0ICogYXMgcGF0aCBmcm9tIFwicGF0aFwiO1xyXG5pbXBvcnQgKiBhcyBmcyBmcm9tIFwiZnNcIjtcclxuaW1wb3J0ICogYXMgcGFja2FnZUpzb24gZnJvbSBcIi4vcGFja2FnZS5qc29uXCI7XHJcblxyXG5jb25zdCBnZW5lcmF0ZVRTTmFtZXNwYWNlID0gKGR0czogTWFwPHN0cmluZywgc3RyaW5nPikgPT4ge1xyXG4gIGlmICghZnMuZXhpc3RzU3luYyhcIi4vZGlzdFwiKSkgcmV0dXJuO1xyXG4gIGNvbnNvbGUubG9nKFwiR2VuZXJhdGluZyBuYW1lc3BhY2UhXCIpO1xyXG4gIGxldCB0eXBlcyA9IFwiXCI7XHJcbiAgZHRzLmZvckVhY2goKGRlY2xhcmF0aW9uKSA9PiB7XHJcbiAgICBjb25zdCBjbGVhbmVkVHlwZSA9IGRlY2xhcmF0aW9uXHJcbiAgICAgIC5yZXBsYWNlKC9leHBvcnRcXHMrXFwqP1xccytmcm9tXFxzK1wiW15cIl0rXCI7L2csIFwiXCIpXHJcbiAgICAgIC5yZXBsYWNlKC9eXFxzKltcXHJcXG5dL2dtLCBcIlwiKVxyXG4gICAgICAucmVwbGFjZSgvYC9nLCBcIidcIik7XHJcbiAgICB0eXBlcyArPSBjbGVhbmVkVHlwZTtcclxuICB9KTtcclxuICBmcy53cml0ZUZpbGVTeW5jKFxyXG4gICAgXCIuL2Rpc3QvbmFtZXNwYWNlLmQudHNcIixcclxuICAgIGBkZWNsYXJlIG5hbWVzcGFjZSBPQkMge1xcbiR7dHlwZXN9XFxufWAsXHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbmZpZyh7XHJcbiAgYnVpbGQ6IHtcclxuICAgIG91dERpcjogXCIuL2Rpc3RcIixcclxuICAgIGxpYjoge1xyXG4gICAgICBlbnRyeTogcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgXCIuL3NyYy9pbmRleC50c1wiKSxcclxuICAgICAgZm9ybWF0czogW1wiZXNcIiwgXCJjanNcIl0sXHJcbiAgICAgIGZpbGVOYW1lOiAoZm9ybWF0KSA9PiB7XHJcbiAgICAgICAgY29uc3QgbWFwID0ge1xyXG4gICAgICAgICAgY2pzOiBcImNqc1wiLFxyXG4gICAgICAgICAgZXM6IFwibWpzXCIsXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gYGluZGV4LiR7bWFwW2Zvcm1hdF19YDtcclxuICAgICAgfSxcclxuICAgIH0sXHJcbiAgICByb2xsdXBPcHRpb25zOiB7XHJcbiAgICAgIGV4dGVybmFsOiBPYmplY3Qua2V5cyhwYWNrYWdlSnNvbi5wZWVyRGVwZW5kZW5jaWVzKSxcclxuICAgICAgb3V0cHV0OiB7XHJcbiAgICAgICAgZ2xvYmFsczoge1xyXG4gICAgICAgICAgdGhyZWU6IFwiVEhSRUVcIixcclxuICAgICAgICAgIFwiQHRoYXRvcGVuL2ZyYWdtZW50c1wiOiBcIkZSQUdTXCIsXHJcbiAgICAgICAgICBcIndlYi1pZmNcIjogXCJXRUItSUZDXCIsXHJcbiAgICAgICAgfSxcclxuICAgICAgfSxcclxuICAgIH0sXHJcbiAgfSxcclxuICBwbHVnaW5zOiBbXHJcbiAgICBkdHMoe1xyXG4gICAgICBpbmNsdWRlOiBbXCIuL3NyY1wiXSxcclxuICAgICAgZXhjbHVkZTogW1wiLi9zcmMvKiovZXhhbXBsZS50c1wiLCBcIi4vc3JjLyoqLyoudGVzdC50c1wiXSxcclxuICAgICAgYWZ0ZXJCdWlsZDogZ2VuZXJhdGVUU05hbWVzcGFjZSxcclxuICAgIH0pLFxyXG4gIF0sXHJcbn0pO1xyXG4iLCAie1xyXG4gIFwibmFtZVwiOiBcIkB0aGF0b3Blbi9jb21wb25lbnRzXCIsXHJcbiAgXCJkZXNjcmlwdGlvblwiOiBcIkNvbGxlY3Rpb24gb2YgY29yZSBmdW5jdGlvbmFsaXRpZXMgdG8gYXV0aG9yIEJJTSBhcHBzLlwiLFxyXG4gIFwidmVyc2lvblwiOiBcIjIuMy4wLWFscGhhLjFcIixcclxuICBcImF1dGhvclwiOiBcIlRoYXQgT3BlbiBDb21wYW55XCIsXHJcbiAgXCJjb250cmlidXRvcnNcIjogW1xyXG4gICAgXCJBbnRvbmlvIEdvbnphbGV6IFZpZWdhcyAoaHR0cHM6Ly9naXRodWIuY29tL2FndmllZ2FzKVwiLFxyXG4gICAgXCJKdWFuIEhveW9zIChodHRwczovL2dpdGh1Yi5jb20vSG95b3NKdWFuKVwiLFxyXG4gICAgXCJIYXJyeSBDb2xsaW4gKGh0dHBzOi8vZ2l0aHViLmNvbS9oYXJyeWNvbGxpbilcIlxyXG4gIF0sXHJcbiAgXCJsaWNlbnNlXCI6IFwiTUlUXCIsXHJcbiAgXCJob21lcGFnZVwiOiBcImh0dHBzOi8vZ2l0aHViLmNvbS9UaGF0T3Blbi9lbmdpbmVfY29tcG9uZW50cy90cmVlL21haW4vcGFja2FnZXMvY29tcG9uZW50cyNyZWFkbWVcIixcclxuICBcImJ1Z3NcIjoge1xyXG4gICAgXCJ1cmxcIjogXCJodHRwczovL2dpdGh1Yi5jb20vVGhhdE9wZW4vZW5naW5lX2NvbXBvbmVudHMvaXNzdWVzXCJcclxuICB9LFxyXG4gIFwidHlwZVwiOiBcIm1vZHVsZVwiLFxyXG4gIFwibWFpblwiOiBcImRpc3QvaW5kZXguY2pzXCIsXHJcbiAgXCJtb2R1bGVcIjogXCJkaXN0L2luZGV4Lm1qc1wiLFxyXG4gIFwidHlwZXNcIjogXCJkaXN0L2luZGV4LmQudHNcIixcclxuICBcImZpbGVzXCI6IFtcclxuICAgIFwiZGlzdFwiXHJcbiAgXSxcclxuICBcInJlcG9zaXRvcnlcIjoge1xyXG4gICAgXCJ0eXBlXCI6IFwiZ2l0XCIsXHJcbiAgICBcInVybFwiOiBcImdpdCtodHRwczovL2dpdGh1Yi5jb20vVGhhdE9wZW4vZW5naW5lX2NvbXBvbmVudHMvdHJlZS9tYWluL3BhY2thZ2VzL2NvbXBvbmVudHMuZ2l0XCJcclxuICB9LFxyXG4gIFwicGFja2FnZU1hbmFnZXJcIjogXCJ5YXJuQDMuMi4xXCIsXHJcbiAgXCJzY3JpcHRzXCI6IHtcclxuICAgIFwiZGV2XCI6IFwidml0ZSAtLWhvc3RcIixcclxuICAgIFwidGVzdFwiOiBcImplc3RcIixcclxuICAgIFwiYnVpbGRcIjogXCJ0c2MgLS1wIC4vdHNjb25maWctYnVpbGQuanNvbiAmJiB2aXRlIGJ1aWxkXCIsXHJcbiAgICBcInByZXB1Ymxpc2hPbmx5XCI6IFwibm9kZSAuL3Jlc291cmNlcy91cGRhdGVDb21wb25lbnRzVmVyc2lvbi5tanMgJiYgeWFybiBidWlsZFwiLFxyXG4gICAgXCJwdWJsaXNoLXJlcG9cIjogXCJucG0gcHVibGlzaFwiLFxyXG4gICAgXCJwdWJsaXNoLWFscGhhXCI6IFwibnBtIHB1Ymxpc2ggLS10YWcgYWxwaGFcIlxyXG4gIH0sXHJcbiAgXCJwdWJsaXNoQ29uZmlnXCI6IHtcclxuICAgIFwiYWNjZXNzXCI6IFwicHVibGljXCJcclxuICB9LFxyXG4gIFwiZGV2RGVwZW5kZW5jaWVzXCI6IHtcclxuICAgIFwiQHRoYXRvcGVuL2ZyYWdtZW50c1wiOiBcIn4yLjIuMFwiLFxyXG4gICAgXCJAdGhhdG9wZW4vdWlcIjogXCJ+Mi4yLjBcIixcclxuICAgIFwiQHR5cGVzL3RocmVlXCI6IFwiMC4xNjAuMFwiLFxyXG4gICAgXCJzdGF0cy5qc1wiOiBcIl4wLjE3LjBcIixcclxuICAgIFwidGhyZWVcIjogXCJeMC4xNjAuMVwiLFxyXG4gICAgXCJ3ZWItaWZjXCI6IFwiMC4wLjU3XCJcclxuICB9LFxyXG4gIFwiZGVwZW5kZW5jaWVzXCI6IHtcclxuICAgIFwiY2FtZXJhLWNvbnRyb2xzXCI6IFwiMi43LjNcIixcclxuICAgIFwiZmFzdC14bWwtcGFyc2VyXCI6IFwiNC40LjFcIixcclxuICAgIFwianN6aXBcIjogXCIzLjEwLjFcIixcclxuICAgIFwidGhyZWUtbWVzaC1idmhcIjogXCIwLjcuMFwiXHJcbiAgfSxcclxuICBcInBlZXJEZXBlbmRlbmNpZXNcIjoge1xyXG4gICAgXCJAdGhhdG9wZW4vZnJhZ21lbnRzXCI6IFwifjIuMi4wXCIsXHJcbiAgICBcInRocmVlXCI6IFwiXjAuMTYwLjFcIixcclxuICAgIFwid2ViLWlmY1wiOiBcIjAuMC41N1wiXHJcbiAgfVxyXG59Il0sCiAgIm1hcHBpbmdzIjogIjtBQUNBLE9BQU8sU0FBUztBQUNoQixTQUFTLG9CQUFvQjtBQUM3QixZQUFZLFVBQVU7QUFDdEIsWUFBWSxRQUFROzs7QUNnRGxCLHVCQUFvQjtBQUFBLEVBQ2xCLHVCQUF1QjtBQUFBLEVBQ3ZCLE9BQVM7QUFBQSxFQUNULFdBQVc7QUFDYjs7O0FEeERGLElBQU0sbUNBQW1DO0FBT3pDLElBQU0sc0JBQXNCLENBQUNBLFNBQTZCO0FBQ3hELE1BQUksQ0FBSSxjQUFXLFFBQVE7QUFBRztBQUM5QixVQUFRLElBQUksdUJBQXVCO0FBQ25DLE1BQUksUUFBUTtBQUNaLEVBQUFBLEtBQUksUUFBUSxDQUFDLGdCQUFnQjtBQUMzQixVQUFNLGNBQWMsWUFDakIsUUFBUSxtQ0FBbUMsRUFBRSxFQUM3QyxRQUFRLGdCQUFnQixFQUFFLEVBQzFCLFFBQVEsTUFBTSxHQUFHO0FBQ3BCLGFBQVM7QUFBQSxFQUNYLENBQUM7QUFDRCxFQUFHO0FBQUEsSUFDRDtBQUFBLElBQ0E7QUFBQSxFQUE0QixLQUFLO0FBQUE7QUFBQSxFQUNuQztBQUNGO0FBRUEsSUFBTyxzQkFBUSxhQUFhO0FBQUEsRUFDMUIsT0FBTztBQUFBLElBQ0wsUUFBUTtBQUFBLElBQ1IsS0FBSztBQUFBLE1BQ0gsT0FBWSxhQUFRLGtDQUFXLGdCQUFnQjtBQUFBLE1BQy9DLFNBQVMsQ0FBQyxNQUFNLEtBQUs7QUFBQSxNQUNyQixVQUFVLENBQUMsV0FBVztBQUNwQixjQUFNLE1BQU07QUFBQSxVQUNWLEtBQUs7QUFBQSxVQUNMLElBQUk7QUFBQSxRQUNOO0FBQ0EsZUFBTyxTQUFTLElBQUksTUFBTSxDQUFDO0FBQUEsTUFDN0I7QUFBQSxJQUNGO0FBQUEsSUFDQSxlQUFlO0FBQUEsTUFDYixVQUFVLE9BQU8sS0FBaUIsZ0JBQWdCO0FBQUEsTUFDbEQsUUFBUTtBQUFBLFFBQ04sU0FBUztBQUFBLFVBQ1AsT0FBTztBQUFBLFVBQ1AsdUJBQXVCO0FBQUEsVUFDdkIsV0FBVztBQUFBLFFBQ2I7QUFBQSxNQUNGO0FBQUEsSUFDRjtBQUFBLEVBQ0Y7QUFBQSxFQUNBLFNBQVM7QUFBQSxJQUNQLElBQUk7QUFBQSxNQUNGLFNBQVMsQ0FBQyxPQUFPO0FBQUEsTUFDakIsU0FBUyxDQUFDLHVCQUF1QixvQkFBb0I7QUFBQSxNQUNyRCxZQUFZO0FBQUEsSUFDZCxDQUFDO0FBQUEsRUFDSDtBQUNGLENBQUM7IiwKICAibmFtZXMiOiBbImR0cyJdCn0K
